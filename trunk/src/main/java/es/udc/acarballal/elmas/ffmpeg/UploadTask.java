package es.udc.acarballal.elmas.ffmpeg;

import java.util.ArrayList;
import java.util.List;

import es.udc.acarballal.elmas.ffmpeg.encoder.EncoderFactory;
import es.udc.acarballal.elmas.ffmpeg.encoder.IVideoEncoder;
import es.udc.acarballal.elmas.ffmpeg.encoder.IEncoderFactory.ENCODER_TYPE;
import es.udc.acarballal.elmas.ffmpeg.encoder.configuration.ConfigurationParametersManager;
import es.udc.acarballal.elmas.ffmpeg.encoder.configuration.MissingConfigurationParameterException;
import es.udc.acarballal.elmas.ffmpeg.process.IProcess;
import es.udc.acarballal.elmas.ffmpeg.process.Process;
import es.udc.acarballal.elmas.ffmpeg.process.util.DirectoryGenerator;

public class UploadTask {
	
	@SuppressWarnings("unused")
	private Long userId;
	@SuppressWarnings("unused")
	private String title;
	@SuppressWarnings("unused")
	private String comment;
	private String originalFile;
	private List<IProcess> processes;
	
	private static final String TEMPORAL_DIRECTORY_PARAMETER = "temporal/directory";
	private static String PATH_TO_TEMP_DIRECTORY;
	private static String temporalDirectory;
	private String autogeneratedCode = new String();
	
	static{
		try {
			PATH_TO_TEMP_DIRECTORY = 
				ConfigurationParametersManager.getParameter(TEMPORAL_DIRECTORY_PARAMETER);
		} catch (MissingConfigurationParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public UploadTask(Long userId, String title, String comment, String originalFile){
		this.userId = userId;
		this.title = title;
		this.comment = comment;
		this.originalFile = originalFile;
		this.processes = new ArrayList<IProcess>();
		createProcesses();
	}
	
	private void createProcesses(){
		
		EncoderFactory factory = new EncoderFactory();
		
		temporalDirectory = DirectoryGenerator.create(PATH_TO_TEMP_DIRECTORY).getAbsolutePath();
		autogeneratedCode = temporalDirectory.replace(PATH_TO_TEMP_DIRECTORY, "");
		temporalDirectory += "\\";
		
		// FLV VIDEO
		String flvName = temporalDirectory + autogeneratedCode + ".flv";
		String flvLog = temporalDirectory + "\\flvEncoding.log";
		IVideoEncoder flvEncoder = 
			factory.createEncoder(ENCODER_TYPE.WEBPORTAL, originalFile, flvName);
		IProcess flvProcess = (IProcess) new Process(flvLog, flvEncoder);
		processes.add(flvProcess);
		
		// MINI FLV VIDEO
		String miniFlvName = temporalDirectory + autogeneratedCode + "_mini.3gp";
		String miniFlvLog = temporalDirectory + "\\miniFlvEncoding.log";
		IVideoEncoder rpEncoder =
				factory.createEncoder(ENCODER_TYPE.MOBILEPORTAL, flvName, miniFlvName);
		IProcess rpProcess = (IProcess) new Process(miniFlvLog, rpEncoder);
		processes.add(rpProcess);
		
	}
	
	public void execute(){
		boolean flag = true;
		while(flag && processes.size()>0){
			flag = processes.get(0).execute();
			processes.remove(0);
		}
	}

}

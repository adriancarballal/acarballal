package es.udc.acarballal.elmas.web.util;

import java.io.File;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;

import es.udc.acarballal.elmas.ffmpeg.encoder.EncoderFactory;
import es.udc.acarballal.elmas.ffmpeg.encoder.IVideoEncoder;
import es.udc.acarballal.elmas.ffmpeg.encoder.IEncoderFactory.ENCODER_TYPE;
import es.udc.acarballal.elmas.ffmpeg.encoder.configuration.ConfigurationParametersManager;
import es.udc.acarballal.elmas.ffmpeg.encoder.configuration.MissingConfigurationParameterException;
import es.udc.acarballal.elmas.ffmpeg.process.IProcess;
import es.udc.acarballal.elmas.ffmpeg.process.Process;
import es.udc.acarballal.elmas.ffmpeg.process.util.DirectoryGenerator;
import es.udc.acarballal.elmas.model.videoservice.VideoService;

public class UploadTask {
	
	private Long userId;
	private String title;
	private String comment;
	private String originalFile;
	private List<IProcess> processes;
	private VideoService videoService;
	
	private static final String TEMPORAL_DIRECTORY_PARAMETER = "temporal/directory";
	private static String PATH_TO_TEMP_DIRECTORY;
	private static String temporalDirectory;
	private String autogeneratedCode = new String();
	
	private static final String FILE_FORMAT = "ISO8859-1";
	protected OutputStreamWriter logWriter = null;
	
	static{
		try {
			PATH_TO_TEMP_DIRECTORY = 
				ConfigurationParametersManager.getParameter(TEMPORAL_DIRECTORY_PARAMETER);
		} catch (MissingConfigurationParameterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public UploadTask(Long userId, String title, String comment, 
			String originalFile, VideoService videoService){
		this.userId = userId;
		this.title = title;
		this.comment = comment;
		this.originalFile = originalFile;
		this.processes = new ArrayList<IProcess>();
		this.videoService = videoService;
		createProcesses();
	}
	
	private void createProcesses(){
		
		EncoderFactory factory = new EncoderFactory();
		//TODO USAR REPLACE
		//Temporal directories
		int i = originalFile.lastIndexOf("\\");
		autogeneratedCode = originalFile.substring(i-DirectoryGenerator.getStringLength(),i);
		String[] file = autogeneratedCode.split("[.]");
		if(file.length>1) autogeneratedCode = file[0];
		
		File dir = new File(PATH_TO_TEMP_DIRECTORY + autogeneratedCode + "\\");
		dir.mkdir();
		temporalDirectory = dir.getAbsolutePath();
		temporalDirectory += "\\";
		
		//UserInfo
		String logFile = temporalDirectory + "userInfo.log";
		try {
			logWriter = new OutputStreamWriter(new FileOutputStream(logFile), FILE_FORMAT);
			logWriter.write("UserId : " + userId + "\n");
			logWriter.write("Title  : " + title + "\n");
			logWriter.write("Comment: " + comment  +"\n");
			logWriter.flush();
			logWriter.close();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		// FLV VIDEO
		String flvName = temporalDirectory + autogeneratedCode + ".flv";
		String flvLog = temporalDirectory + "flvEncoding.log";
		IVideoEncoder flvEncoder = 
			factory.createEncoder(ENCODER_TYPE.WEBPORTAL, originalFile, flvName);
		IProcess flvProcess = (IProcess) new Process(flvLog, flvEncoder);
		processes.add(flvProcess);
		
		// MINI FLV VIDEO
		String miniName = temporalDirectory + autogeneratedCode + ".3gp";
		String miniLog = temporalDirectory + "3gpEncoding.log";
		IVideoEncoder rpEncoder =
				factory.createEncoder(ENCODER_TYPE.MOBILEPORTAL, flvName, miniName);
		IProcess rpProcess = (IProcess) new Process(miniLog, rpEncoder);
		processes.add(rpProcess);
		
		//VIDEO ACCEPTANCE
		IProcess accept = new VideoAccept(userId, title, comment, originalFile);
		((VideoAccept)accept).setUserService(videoService);
		processes.add(accept);
		
		//TODO descomentar para eliminar logFiles
		//DELETE LOGS
//		List<File> logs = new ArrayList<File>();
//		logs.add(new File(flvLog));
//		logs.add(new File(miniLog));
//		logs.add(new File(logFile));
//		IProcess deleteLogFiles = new LogDelete(logs);
//		processes.add(deleteLogFiles);
	}
	
	public void execute(){
		boolean flag = true;
		while(flag && processes.size()>0){
			flag = processes.get(0).execute();
			processes.remove(0);
		}
	}

}
